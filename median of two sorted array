#include <stdio.h>

double findMedianSortedArrays(int* nums1, int m, int* nums2, int n) {
    if (m > n) {
        return findMedianSortedArrays(nums2, n, nums1, m);
    }

    int low = 0, high = m;
    while (low <= high) {
        int partitionX = (low + high) / 2;
        int partitionY = (m + n + 1) / 2 - partitionX;

        int maxLeftX = (partitionX == 0) ? -1000001 : nums1[partitionX - 1];
        int minRightX = (partitionX == m) ? 1000001 : nums1[partitionX];

        int maxLeftY = (partitionY == 0) ? -1000001 : nums2[partitionY - 1];
        int minRightY = (partitionY == n) ? 1000001 : nums2[partitionY];

        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
            if ((m + n) % 2 == 0) {
                int maxLeft = maxLeftX > maxLeftY ? maxLeftX : maxLeftY;
                int minRight = minRightX < minRightY ? minRightX : minRightY;
                return (maxLeft + minRight) / 2.0;
            } else {
                int maxLeft = maxLeftX > maxLeftY ? maxLeftX : maxLeftY;
                return maxLeft;
            }
        } else if (maxLeftX > minRightY) {
            high = partitionX - 1;
        } else {
            low = partitionX + 1;
        }
    }

    return 0.0;
}
